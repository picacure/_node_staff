// Generated by CoffeeScript 1.6.3
(function() {
  var fn,
    __hasProp = {}.hasOwnProperty;

  module.exports = fn = function(params) {
    var arg, argn, args, i, left, leftRequired, name, numRequired, param, paramList, ret, right, rightRequired, _i, _j, _k, _len, _len1, _len2;
    paramList = (function() {
      var _results;
      _results = [];
      for (name in params) {
        if (!__hasProp.call(params, name)) continue;
        param = params[name];
        param.name = name;
        _results.push(param);
      }
      return _results;
    })();
    ret = [];
    numRequired = 0;
    leftRequired = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = paramList.length; _i < _len; _i++) {
        param = paramList[_i];
        if (param.hasOwnProperty("default")) {
          break;
        }
        numRequired++;
        _results.push(param);
      }
      return _results;
    })();
    paramList.splice(0, leftRequired.length);
    rightRequired = (function() {
      var _i, _len, _ref, _results;
      _ref = paramList.slice(0).reverse();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        if (param.hasOwnProperty("default")) {
          break;
        }
        numRequired++;
        _results.push(param);
      }
      return _results;
    })();
    rightRequired = rightRequired.reverse();
    paramList.splice(-rightRequired.length);
    args = Array.prototype.slice.call(fn.caller["arguments"]);
    if (args.length < numRequired) {
      throw new Error("Not enough arguments.");
    }
    left = args.splice(0, leftRequired.length);
    right = args.splice(-rightRequired.length);
    argn = 0;
    for (i = _i = 0, _len = left.length; _i < _len; i = ++_i) {
      arg = left[i];
      argn++;
      param = leftRequired[i];
      if (!fn.validators[param.type](arg)) {
        throw new TypeError("" + param.name + " (" + argn + ") is not a valid " + param.type);
      }
      ret.push(arg);
    }
    for (i = _j = 0, _len1 = paramList.length; _j < _len1; i = ++_j) {
      param = paramList[i];
      argn++;
      if (args.length > i) {
        arg = args[i];
        if (!fn.validators[param.type](arg)) {
          throw new TypeError("" + param.name + " (" + argn + ") is not a valid " + param.type);
        }
        ret.push(arg);
      } else {
        ret.push(param["default"]);
      }
    }
    for (i = _k = 0, _len2 = right.length; _k < _len2; i = ++_k) {
      arg = right[i];
      argn++;
      param = rightRequired[i];
      if (!fn.validators[param.type](arg)) {
        throw new TypeError("" + param.name + " (" + argn + ") is not a valid " + param.type);
      }
      ret.push(arg);
    }
    return ret;
  };

  fn.validators = {
    string: function(val) {
      return typeof val === "string";
    },
    "function": function(val) {
      return typeof val === "function";
    },
    bool: function(val) {
      return typeof val === "boolean";
    }
  };

  /*
  myfn = ->
  	[path, bare, cb] = fn
  		path: type: "string"
  		bare: type: "bool", default: false
  		cb: type: "function"
  	console.log path, bare, cb
  
  myfn "awesome", "zzz"
  */


}).call(this);
